set nocompatible
filetype off

if has('nvim') "neovim
    call plug#begin("~/.local/share/nvim/plugged")
else "vim
    call plug#begin("~/.vim/plugged")
endif

"Plugin 'Valloric/YouCompleteMe' "https://github.com/Valloric/YouCompleteMe
Plug 'terryma/vim-multiple-cursors' "https://github.com/terryma/vim-multiple-cursors
Plug 'luochen1990/rainbow' "https://github.com/luochen1990/rainbow
Plug 'tpope/vim-surround' "https://github.com/tpope/vim-surround
Plug 'tpope/vim-commentary' "https://github.com/tpope/vim-commentary
Plug 'reedes/vim-pencil' "https://github.com/reedes/vim-pencil
Plug 'majutsushi/tagbar' "https://github.com/majutsushi/tagbar
Plug 'dhruvasagar/vim-table-mode' "https://github.com/dhruvasagar/vim-table-mode
Plug 'craigemery/vim-autotag' "https://github.com/craigemery/vim-autotag
Plug 'kshenoy/vim-signature' "https://github.com/kshenoy/vim-signature
Plug 'nvie/vim-flake8' "https://github.com/nvie/vim-flake8
Plug 'rust-lang/rust.vim' "https://github.com/rust-lang/rust.vim
Plug 'yegappan/taglist' "https://vimawesome.com/plugin/taglist-vim

call plug#end()


filetype on
filetype plugin indent on

set history=50 "50 lines of command line history
set ruler      "show the cursor pistion all times
set showcmd    "display incomplete commands
set incsearch  "do incremental searching
set showmatch  "show matching parens
set tabstop=4 "set tabstop
set expandtab "set softabs
set shiftwidth=4 "indentation shift amount
set hlsearch "keep highlighting on
set nowrap "Turn off wrapping
set tags=tags;/
" per project vimrcs
set exrc
set secure
" set fold to be based on manual. So its there if needed
set fdm=manual
" set charlist
set listchars=tab:ðŸ¢’\ ,extends:ðŸ¢–,precedes:ðŸ¢”
set list
"set hidden to hide new unsave buffers
set hidden

"netrw settings [netrw-browse-maps] for help
let g:netrw_banner=0
let g:netrw_liststyle=3
let g:netrw_altv=1

" colors
syntax on
" theme here:
color ryslate
" tagbar colors
highlight TagBarScope ctermfg=darkcyan
highlight TagbarHighlight ctermbg=cyan  ctermfg=white
" color column
set cc=80
:hi ColorColumn ctermbg=DarkGray
set cursorline

" turn off comment formatting options
" c auto insert comment leader when wrapping bsed on textwidth
" o insert comment leader when using o or O
" r insert coment leader when hitting <Enter> in insert mode
autocmd BufRead,BufNewFile * set formatoptions-=c formatoptions -=o formatoptions -=r
" bad whitespace
" highlight bad whitespace
highlight BadWhitespace ctermbg=red guibg=red
" makes tabs in beginning of line in Python bad whitespace
autocmd BufRead,BufNewFile *.py match BadWhitespace /^\t+/
" makes trailing whitespace in all lanugages bad
autocmd BufRead,BufNewFile * match BadWhitespace /\s\+$/
" remove bad white space on save
autocmd BufWritePre * %s/\s\+$//ge
" preview windows
autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle"

" use ranger as a file manager/exporer
" https://www.everythingcli.org/use-ranger-as-a-file-explorer-in-vim
function RangerExplorer()
    exec "silent !ranger --choosefile=/tmp/vim_ranger_current_file " . expand("%:p:h")
    if filereadable('/tmp/vim_ranger_current_file')
        exec 'edit ' . system('cat /tmp/vim_ranger_current_file')
        call system('rm /tmp/vim_ranger_current_file')
    endif
    redraw!
endfun

" line number mode
let num = 0
function! RelNumToggle()
    if g:num
        let g:num = 0
        set norelativenumber
        set number
    else
        let g:num = 1
        set relativenumber
        set number
    endif
endfunction
call RelNumToggle()

" create both parens
let autoparens = 0
function! AutoParensToggle()
    if g:autoparens
        let g:autoparens = 0
        inoremap { {
        inoremap ( (
        inoremap [ [
        inoremap ' '
        inoremap " "
    else
        let g:autoparens = 1
        inoremap { {}<Esc>i
        inoremap ( ()<Esc>i
        inoremap [ []<Esc>i
        inoremap ' ''<Esc>i
        inoremap " ""<Esc>i
    endif
endfunction
call AutoParensToggle()

"set and unset mode
let pastemode = 0
function! PasteModeToggle()
    if g:pastemode
        let g:pastemode = 0
        set paste
    else
        let g:pastemode = 1
        set nopaste
    endif
endfunction
call PasteModeToggle()

function! InsertPython()
    -1read ~/RCs/Vim/VimTemplates/python
    call cursor(2,1)
endfunction

" Pencil status line to let you know when its enabled
set rulerformat=%-12.(%l,%c%V%)%{PencilMode()}\ %P

" F2 opens taglist
map <F2> :TlistToggle<CR>
" F3 opens tagbar
map <F3> :TagbarToggle<CR>
" F4 opens netrw on current directory
map <F4> :edit .<CR>
" F5 prints absolute path of file
map <F5> :echo expand('%:p')<CR>
" F6 Toggles auto parens
map <F6> :call PasteModeToggle()<CR>
" F7 Toggles line numer (regular to relative)
map <F7> :call Flake8()<CR>
" F8 opens a new tab
map <F8> :tabnew<CR>
" F9 runs vsplit
map <F9> :vsplit<CR>
" F10 runs split
map <F10> :split<CR>
" F12 runs ctags
map <F12> :! ctags -R -f tags .<CR>
" leader f calls flake8
map <leader>R :call RelNumToggle()<CR>
" Turn off numbers
map <leader>N :set nonumber<CR>:set norelativenumber<CR>:let g:num=0<CR>
" quick fix window mappings
map [q :cprev<CR>
map ]q :cnext<CR>
map [Q :cfirst<CR>
map ]Q :clast<CR>
" scroll mappings
map zk <c-y>
map zj <c-e>
" resize mappings
map <leader>. :vertical resize +5<CR>
map <leader>, :vertical resize -5<CR>
map <leader>= :resize +5<CR>
map <leader>- :resize -5<CR>
" insert lines with out entering insertmode
map <leader>o o<Esc>
map <leader>O O<Esc>
" insert template calls
map <leader>P :call InsertPython()<CR>
" buffers
map <leader>l :bn<CR>
map <leader>h :bp<CR>
map <leader>E :enew<CR>
map <leader>d :bd<CR>
" reset syntax when it occasionally gets messed up
map <leader>S :syntax sync fromstart<CR>
" execute :shell
map <leader>s :shell<CR>"
" searching for highlighted text
vnoremap // y/<C-R>"<CR>
" Call Ranger for file management
map <Leader>r :call RangerExplorer()<CR>
" clear marks a-z and A-Z
map <leader>m :delmarks a-zA-Z<CR>
" toggle pencil mode
map <leader>p :TogglePencil<CR>
" turn on hard pencil mode
map <leader>hp :HardPencil<CR>
" turn on soft pencil mode
map <leader>sp :SoftPencil<CR>
