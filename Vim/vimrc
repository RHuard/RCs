set nocompatible
filetype on

"https://github.com/gmarik/Vundle.vim
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

"this is required for Vundle
Plugin 'gmarik/Vundle.vim' "https://github.com/VundleVim/Vundle.vim
Plugin 'Valloric/YouCompleteMe' "https://github.com/Valloric/YouCompleteMe
Plugin 'terryma/vim-multiple-cursors' "https://github.com/terryma/vim-multiple-cursors
Plugin 'luochen1990/rainbow' "https://github.com/luochen1990/rainbow
Plugin 'tpope/vim-surround' "https://github.com/tpope/vim-surround
Plugin 'tpope/vim-commentary' "https://github.com/tpope/vim-commentary
Plugin 'reedes/vim-pencil' "https://github.com/reedes/vim-pencil

call vundle#end()
filetype plugin indent on

set history=50 "50 lines of command line history
set ruler      "show the cursor pistion all times
set showcmd    "display incomplete commands
set incsearch  "do incremental searching
set showmatch  "show matching parens

"Line Numbers
let num = 0

function! RelNumToggle()
    if g:num
        let g:num = 0
        set norelativenumber
    else
        let g:num = 1
        set relativenumber
        set number
    endif
endfunction

call RelNumToggle()

"Formating
"set tabstop and turn into softabs
set tabstop=4
set expandtab
"indentation shift amount
set shiftwidth=4

"keep highlighting on
set hlsearch

"wrap text after certain number of characters
"autocmd BufRead,BufNewFile * set textwidth=80

"Turn off comment formatting options
"c auto insert comment leader when wrapping bsed on textwidth
"o insert comment leader when using o or O
"r insert coment leader when hitting <Enter> in insert mode
autocmd BufRead,BufNewFile * set formatoptions-=c formatoptions -=o formatoptions -=r

"COLORS
syntax on
color ryslate
"Theme here:
set cc=80
:hi ColorColumn ctermbg=DarkGray

set cursorline

"highlight bad whitespace
highlight BadWhitespace ctermbg=red guibg=red
"makes tabs in beginning of line in Python bad whitespace
autocmd BufRead,BufNewFile *.py match BadWhitespace /^\t+/
"makes trailing whitespace in all lanugages bad
autocmd BufRead,BufNewFile * match BadWhitespace /\s\+$/

let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle"

let autoparens = 0
"create both parens
function! AutoParensToggle()
    if g:autoparens
        let g:autoparens = 0
        inoremap { {
        inoremap ( (
        inoremap [ [
        inoremap ' '
        inoremap " "
        inoremap < <
    else
        let g:autoparens = 1
        inoremap { {}<Esc>i
        inoremap ( ()<Esc>i
        inoremap [ []<Esc>i
        inoremap ' ''<Esc>i
        inoremap " ""<Esc>i
        inoremap < <><Esc>i
    endif
endfunction

call AutoParensToggle()

set tags=tags;/

map [q :cprev<CR>
map ]q :cnext<CR>
map [Q :cfirst<CR>
map ]Q :clast<CR>

"netrw settings [netrw-browse-maps] for help
let g:netrw_banner=0
let g:netrw_liststyle=3
let g:netrw_altv=1

"F2 opens taglist
map <F2> :TlistToggle<CR>
"F3 open vim file manager
map <F3> :edit .<CR>
"F4 toggles AutoParens
map <F4> :call AutoParensToggle()<CR>
"F5 opens a new tab
map <F5> :tabnew<CR>
"F6 gets absolute path
map <F6> :echo expand('%:p')<CR>
"F7 toggles line number (regular to relative)
map <F7> :call RelNumToggle()<CR>
"F8 Toggles Rainbow Parens
map <F8> :RainbowToggle<CR>
"F9 runs vsplit
map <F9> :vsplit<CR>
"F10 runs split
map <F10> :split<CR>
"F12 runs ctags
map <F12> :! ctags -R -f tags .<CR>
"Searching for highlighted text
vnoremap // y/<C-R>"<CR>

"PREVIEW WINDOWS
autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

"per project vimrcs
set exrc
set secure
